# German translation of the latexila documentation.
# Mario Blättermann <mariobl@freenet.de>, 2011.
#
msgid ""
msgstr ""
"Project-Id-Version: latexila master\n"
"POT-Creation-Date: 2011-07-15 23:29+0200\n"
"PO-Revision-Date: 2011-07-15 23:55+0100\n"
"Last-Translator: Mario Blättermann <mariobl@freenet.de>\n"
"Language-Team: German <gnome-de@gnome.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Poedit-Language: German\n"
"X-Poedit-Country: GERMANY\n"

#. Put one translator per line, in the form NAME <EMAIL>, YEAR1, YEAR2
msgctxt "_"
msgid "translator-credits"
msgstr "Mario Blättermann <mariobl@freenet.de>, 2011"

#: build_tools.page:9(page/title)
msgid "Build Tools"
msgstr "Erstellungswerkzeuge"

#: build_tools.page:12(synopsis/p)
msgid "The purpose of the build tools is to generate a document in the PDF, DVI or PS format."
msgstr ""

#: build_tools.page:19(section/title)
msgid "Overview"
msgstr "Übersicht"

#: build_tools.page:21(section/p)
msgid "Several different tools can be used for a document compilation. There are some low-level commands, and two higher-level tools: Latexmk and Rubber."
msgstr ""

#: build_tools.page:25(table/title)
msgid "Low-level commands"
msgstr ""

#: build_tools.page:28(td/p)
msgid "Label"
msgstr ""

#: build_tools.page:29(td/p)
msgid "Command"
msgstr "Befehl"

#: build_tools.page:34(td/p)
msgid "LaTeX → DVI"
msgstr "LaTeX → DVI"

#: build_tools.page:35(td/p)
msgid "<cmd>latex</cmd>"
msgstr "<cmd>latex</cmd>"

#: build_tools.page:38(td/p)
msgid "LaTeX → PDF"
msgstr "LaTeX → PDF"

#: build_tools.page:39(td/p)
msgid "<cmd>pdflatex</cmd>"
msgstr "<cmd>pdflatex</cmd>"

#: build_tools.page:44(td/p)
msgid "DVI → PDF"
msgstr "DVI → PDF"

#: build_tools.page:45(td/p)
msgid "<cmd>dvipdf</cmd>"
msgstr "<cmd>dvipdf</cmd>"

#: build_tools.page:48(td/p)
msgid "DVI → PS"
msgstr "DVI → PS"

#: build_tools.page:49(td/p)
msgid "<cmd>dvips</cmd>"
msgstr "<cmd>dvips</cmd>"

#: build_tools.page:52(td/p)
msgid "PS → PDF"
msgstr "PS → PDF"

#: build_tools.page:53(td/p)
msgid "<cmd>ps2pdf</cmd>"
msgstr "<cmd>ps2pdf</cmd>"

#: build_tools.page:58(td/p)
msgid "Bibliography"
msgstr "Bibliografie"

#: build_tools.page:59(td/p)
msgid "<cmd>bibtex</cmd>"
msgstr "<cmd>bibtex</cmd>"

#: build_tools.page:62(td/p)
msgid "Index"
msgstr "Index"

#: build_tools.page:63(td/p)
msgid "<cmd>makeindex</cmd>"
msgstr "<cmd>makeindex</cmd>"

#: build_tools.page:68(section/p)
msgid "Compiling a LaTeX document can involve to execute several low-level commands, in a certain order and a certain number of times. Here is an example:"
msgstr ""

#: build_tools.page:70(section/screen)
#, no-wrap
msgid ""
"\n"
"$ latex document.tex\n"
"$ bibtex document.aux\n"
"$ latex document.tex\n"
"$ dvips -t a4 document.dvi\n"
"$ ps2pdf document.ps"
msgstr ""
"\n"
"$ latex document.tex\n"
"$ bibtex document.aux\n"
"$ latex document.tex\n"
"$ dvips -t a4 document.dvi\n"
"$ ps2pdf document.ps"

#: build_tools.page:77(section/p)
msgid "Using a higher-level tool such as Latexmk or Rubber simplify a lot all this process, since only one command is required. Indeed, these tools can detect how many times the <cmd>latex</cmd> or <cmd>pdflatex</cmd> command must be called, and whether <cmd>bibtex</cmd> or <cmd>makeindex</cmd> is required. By default, LaTeXila uses Latexmk."
msgstr ""

#: build_tools.page:85(section/title)
msgid "Differences Between Latexmk and Rubber"
msgstr "Unterschiede zwischen Latexmk und Rubber"

#: build_tools.page:86(section/p)
msgid "<link href=\"http://www.phys.psu.edu/~collins/software/latexmk-jcc/\">Latexmk</link> and <link href=\"https://launchpad.net/rubber/\">Rubber</link> have the same purpose: simplify the compilation process of a LaTeX document. Latexmk is written in Perl, while Rubber is written in Python."
msgstr ""

#: build_tools.page:91(section/p)
msgid "The output of Latexmk contains more information: which commands are executed, how many times, their output, and the reasons why Latexmk executes (or doesn't execute) these commands. The output of Rubber, on the other hand, doesn't contain a lot of information. When an error occurs, it can be more difficult to diagnose."
msgstr ""

#: build_tools.page:96(section/p)
msgid "Also, Rubber filter the output of the <cmd>latex</cmd> or <cmd>pdflatex</cmd> command. As a consequence, when Rubber prints an error, it's more difficult to know which type of error it is. If you use Latexmk, errors are categorized into three types: critical errors, simple warnings and bad-boxes (for example when a word exceed the margin). With Rubber, there is no distinction between critical errors and simple warnings. See <link xref=\"#post-processors\"/> for more information."
msgstr ""

#: build_tools.page:103(section/p)
msgid "Latexmk is more flexible. Each low-level command can be customized, for example for adding a parameter, or use a completely other tool. This can be done both from the command line and in configuration files (see the <cmd>-e</cmd> and <cmd>-r</cmd> options). Rubber is also configurable, but less than Latexmk."
msgstr ""

#: build_tools.page:108(section/p)
msgid "Last, but not least: Rubber seems to have more bugs and is less actively maintained than Latexmk."
msgstr ""

#: build_tools.page:113(section/title)
msgid "Execute a Build Tool"
msgstr ""

#: build_tools.page:115(section/p)
msgid "There are several means to execute a build tool:"
msgstr ""

#: build_tools.page:117(item/p)
msgid "Open the <gui style=\"menu\">Build</gui> menu (first part)."
msgstr ""

#: build_tools.page:118(item/p)
msgid "Use the buttons in the main toolbar (last part)."
msgstr ""

#: build_tools.page:119(item/p)
msgid "Use the shortcut: <key>F2</key> → <key>F11</key>."
msgstr ""

#: build_tools.page:122(section/p)
msgid "The build tool is executed on the currently opened file. If the file belongs to a project, it is executed on the project's main file."
msgstr ""

#: build_tools.page:126(note/title)
msgid "Hidden Build Tools"
msgstr ""

#: build_tools.page:127(note/p)
msgid "By default, a lot of build tools are hidden, so they can't be executed. To view the full list of build tools, activate or configure them, read the <link xref=\"#general_configuration\"/> section."
msgstr ""

#: build_tools.page:134(section/title)
msgid "General Configuration"
msgstr "Allgemeine Konfiguration"

#: build_tools.page:136(section/p)
msgid "To configure the build tools, open the preferences dialog: <guiseq> <gui style=\"menu\">Edit</gui> <gui style=\"menu\">Preferences</gui> <gui style=\"tab\">LaTeX</gui> </guiseq>"
msgstr ""

#: build_tools.page:145(section/p)
msgid "You will see a list with all the build tools. There are check buttons to show or hide them. When a build tool is hidden, it's not possible to execute it. You can perform some actions, like moving a tool up or down, open its properties, delete or copy it, create a new one, etc."
msgstr ""

#: build_tools.page:151(note/p)
msgid "Double-click on a build tool will open its properties."
msgstr ""

#: build_tools.page:154(section/p)
msgid "For an explanation of the option about the Latexmk post processor, see <link xref=\"#post-processors\"/>."
msgstr ""

#: build_tools.page:159(section/title)
msgid "Jobs of a Build Tool"
msgstr "Aufgaben eines Erstellungswerkzeuges"

#: build_tools.page:161(section/p)
msgid "In the properties of a build tool, the tricky part is to configure the jobs. A build tool can execute several jobs. Each job contains three pieces of information:"
msgstr ""

#: build_tools.page:165(item/p)
msgid "The command, which can use placeholders."
msgstr "Der Befehl, welcher Platzhalter enthalten kann."

#: build_tools.page:166(item/p)
msgid "Whether the job must succeed. If this option is enabled, when an error occurs during the job execution, the next job is not executed."
msgstr ""

#: build_tools.page:168(item/p)
msgid "The post processor (see <link xref=\"#post-processors\"/>)."
msgstr ""

#: build_tools.page:173(section/title)
msgid "Post Processors"
msgstr ""

#: build_tools.page:174(section/p)
msgid "The purpose of a post processor is to filter the command output and extract the useful information. Five post processors are available:"
msgstr ""

#: build_tools.page:179(item/title)
msgid "no-output"
msgstr "no-output"

#: build_tools.page:180(item/p)
msgid "The output is simply not displayed."
msgstr ""

#: build_tools.page:183(item/title)
msgid "all-output"
msgstr "all-output"

#: build_tools.page:184(item/p)
msgid "All the output is displayed, without filter."
msgstr ""

#: build_tools.page:187(item/title)
msgid "latex"
msgstr "latex"

#: build_tools.page:188(item/p)
msgid "Filter the output of the <cmd>latex</cmd> or <cmd>pdflatex</cmd> commands. There can be three types of errors: critical errors, warnings, or bad-boxes. There are also some other useful information: the size of the document, the number of pages, and the number of errors."
msgstr ""

#: build_tools.page:194(item/title)
msgid "latexmk"
msgstr "latexmk"

#: build_tools.page:195(item/p)
msgid "Used for the <cmd>latexmk</cmd> command. Internally, this post processor uses other ones: <em>latex</em> and <em>all-output</em>."
msgstr ""

#: build_tools.page:198(item/p)
msgid "In the <link xref=\"#general_configuration\"/>, there is an option for always showing all information of this post processor. If this option is disabled (which is the case by default), only the output of the last <cmd>latex</cmd> or <cmd>pdflatex</cmd> command is displayed, if no error occurred in another command. This allows to reduce the output showed in the bottom panel. But even if there are no errors, it can be useful to see exactly which commands are executed, with their output."
msgstr ""

#: build_tools.page:207(item/title)
msgid "rubber"
msgstr "rubber"

#: build_tools.page:208(item/p)
msgid "This is the post-processor used for the <cmd>rubber</cmd> command. The errors are categorized into two types: bad-boxes, and the others. So, unlike the <em>latex</em> post processor, there is no distinction between critical errors and simple warnings."
msgstr ""

#: index.page:4(page/title)
msgid "LaTeXila Help"
msgstr "Hilfe zu LaTeXila"

